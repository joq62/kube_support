%%% -------------------------------------------------------------------
%%% @author  : Joq Erlang
%%% @doc: : 
%%%  
%%% Created : 10 dec 2012
%%% -------------------------------------------------------------------
-module(computer). 



-export([check_computers/0
	]).

-define(TimeOut,3000).

%% ====================================================================
%% External functions
%% ====================================================================

%@doc, spec etc

%check_computers()->
%    Computers=db_computer:read_all(),
%    R1=[{HostId,get_hostname(HostId,User,PassWd,IpAddr,Port)}||{HostId,User,PassWd,IpAddr,Port}<-Computers],
%    ComputerStatus=check_status(R1,[]),
%    ComputerStatus.

check_computers()->
    Computers=db_computer:read_all(),
    io:format("Computers = ~p~n",[{?MODULE,?LINE,Computers}]),
    MapProcesses=map_start(Computers,[]),
    CollectedResult=map_collect(MapProcesses),
    ComputerStatus=map_reduce(CollectedResult),
    ComputerStatus.

map_start([],MapProcesses)->
    MapProcesses;
map_start([{HostId,User,PassWd,IpAddr,Port}|T],Acc)->
    Parent=self(),
    Pid=spawn_link(fun()->get_hostname(Parent,HostId,User,PassWd,IpAddr,Port) end),
    map_start(T,[{HostId,Pid}|Acc]).
			   

map_collect([])->
    [];
map_collect(MapProcesses)->
    N=lists:flatlength(MapProcesses), 
    map_collect(N,[]).

map_collect(0,CollectedInfo)->
    CollectedInfo;
map_collect(N,Acc) ->
    NewAcc=receive
	       {_Pid,GetHostNameResult}->
		   [GetHostNameResult|Acc]
	   after 2*?TimeOut->
		   Acc
    end,
    map_collect(N-1,NewAcc).

map_reduce(CollectedResult)->		
  check_host_status(CollectedResult,[]).

get_hostname(Parent,HostId,User,PassWd,IpAddr,Port)->
    Msg="hostname",
    Result=my_ssh:ssh_send(IpAddr,Port,User,PassWd,Msg,?TimeOut),
    Parent!{self(),{HostId,Result}}.


check_host_status([],ComputerStatus)->
    ComputerStatus;
check_host_status([{HostId,[HostId]}|T],Acc)->
    Vm10250=list_to_atom("10250"++"@"++HostId),
    NewAcc=case net_adm:ping(Vm10250) of
	       pong->
		   [{running,HostId}|Acc];
	       pang->
		   [{available,HostId}|Acc]
	   end,
    check_host_status(T,NewAcc);

check_host_status([{HostId,{error,_Err}}|T],Acc) ->
    check_host_status(T,[{not_available,HostId}|Acc]).

%% --------------------------------------------------------------------
%% Function: 
%% Description:
%% Returns: non
%% --------------------------------------------------------------------
